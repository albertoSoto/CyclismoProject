apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

check.dependsOn 'findbugs'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0+'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':Cyclismo:CyclismoLib')
    compile project(':aFileChooser')
    compile project(':jformica_android')
    compile project(':Location')
    compile project(':jformica_core')
    compile project(':JTurbo')
    compile project(':google-play-services_lib')
    androidTestCompile fileTree(dir: 'test_libs', include: '*.jar')
    compile 'com.android.support:support-v4:13.+'
}

android {
    compileSdkVersion 16
    buildToolsVersion "22"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 16
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

task checkstyle(type: Checkstyle) {
    // FIXME: Check this in
    configFile file("${project.rootDir}/quality/checkstyle/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

findbugs {
    sourceSets = []
    ignoreFailures = true
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'

    classes = fileTree('build/intermediates/classes/debug/')
    classes.exclude '**/R.class'
    classes.exclude '**/R$*.class'

    source = fileTree('src')
    classpath = files()

    effort = 'max'

    excludeFilter = file("${project.rootDir}/quality/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

check.doLast {
    project.tasks.getByName("findbugs").execute()
}

