/*
*    Copyright (c) 2013, Will Szumski
*    Copyright (c) 2013, Doug Szumski
*
*    This file is part of Cyclismo.
*
*    Cyclismo is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    Cyclismo is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with Cyclismo.  If not, see <http://www.gnu.org/licenses/>.
*/
// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

package org.cowboycoders.cyclismo.content;

option optimize_for = LITE_RUNTIME;

// An enumeration of the state of a single sensor.
enum SensorState {
  // There is no sensor.
  NONE = 1;

  // Now initiating an outgoing connection.
  CONNECTING = 2;

  // Now connected to a remote device.
  CONNECTED = 3;

  // A state where the sensor is not connected.
  DISCONNECTED = 4;

  // This is the only state where the sensor data can be used.
  SENDING = 5;
};

// The state and possible reading for one integer sensor.
message SensorData {
  required SensorState state = 1 [default = NONE];
  
  // Value is only defined if state = SENDING.
  optional int32 value = 2;
};

// A message to encapsulate sensor readings associated with a track point.
message SensorDataSet {
  // This is a required field.
  optional uint64 creation_time = 1 [default = 0];
  
  optional SensorData heart_rate = 2;
  optional SensorData cadence = 3;
  optional SensorData power = 4;
  optional SensorData battery_level = 5;
  optional SensorData speed = 6;
  optional SensorData distance = 7;
  optional SensorData power_b = 8;
  optional SensorData temperature = 9;
}