// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

package org.cowboycoders.cyclismo.content;

public final class Sensor {
  private Sensor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code org.cowboycoders.cyclismo.content.SensorState}
   *
   * <pre>
   * An enumeration of the state of a single sensor.
   * </pre>
   */
  public enum SensorState
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NONE = 1;</code>
     *
     * <pre>
     * There is no sensor.
     * </pre>
     */
    NONE(0, 1),
    /**
     * <code>CONNECTING = 2;</code>
     *
     * <pre>
     * Now initiating an outgoing connection.
     * </pre>
     */
    CONNECTING(1, 2),
    /**
     * <code>CONNECTED = 3;</code>
     *
     * <pre>
     * Now connected to a remote device.
     * </pre>
     */
    CONNECTED(2, 3),
    /**
     * <code>DISCONNECTED = 4;</code>
     *
     * <pre>
     * A state where the sensor is not connected.
     * </pre>
     */
    DISCONNECTED(3, 4),
    /**
     * <code>SENDING = 5;</code>
     *
     * <pre>
     * This is the only state where the sensor data can be used.
     * </pre>
     */
    SENDING(4, 5),
    ;

    /**
     * <code>NONE = 1;</code>
     *
     * <pre>
     * There is no sensor.
     * </pre>
     */
    public static final int NONE_VALUE = 1;
    /**
     * <code>CONNECTING = 2;</code>
     *
     * <pre>
     * Now initiating an outgoing connection.
     * </pre>
     */
    public static final int CONNECTING_VALUE = 2;
    /**
     * <code>CONNECTED = 3;</code>
     *
     * <pre>
     * Now connected to a remote device.
     * </pre>
     */
    public static final int CONNECTED_VALUE = 3;
    /**
     * <code>DISCONNECTED = 4;</code>
     *
     * <pre>
     * A state where the sensor is not connected.
     * </pre>
     */
    public static final int DISCONNECTED_VALUE = 4;
    /**
     * <code>SENDING = 5;</code>
     *
     * <pre>
     * This is the only state where the sensor data can be used.
     * </pre>
     */
    public static final int SENDING_VALUE = 5;


    public final int getNumber() { return value; }

    public static SensorState valueOf(int value) {
      switch (value) {
        case 1: return NONE;
        case 2: return CONNECTING;
        case 3: return CONNECTED;
        case 4: return DISCONNECTED;
        case 5: return SENDING;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorState>() {
            public SensorState findValueByNumber(int number) {
              return SensorState.valueOf(number);
            }
          };

    private final int value;

    private SensorState(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.cowboycoders.cyclismo.content.SensorState)
  }

  public interface SensorDataOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];
    /**
     * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
     */
    boolean hasState();
    /**
     * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorState getState();

    // optional float value = 2;
    /**
     * <code>optional float value = 2;</code>
     *
     * <pre>
     * Value is only defined if state = SENDING.
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional float value = 2;</code>
     *
     * <pre>
     * Value is only defined if state = SENDING.
     * </pre>
     */
    float getValue();
  }
  /**
   * Protobuf type {@code org.cowboycoders.cyclismo.content.SensorData}
   *
   * <pre>
   * The state and possible reading for a single sensor.
   * </pre>
   */
  public static final class SensorData extends
      com.google.protobuf.GeneratedMessageLite
      implements SensorDataOrBuilder {
    // Use SensorData.newBuilder() to construct.
    private SensorData(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private SensorData(boolean noInit) {}

    private static final SensorData defaultInstance;
    public static SensorData getDefaultInstance() {
      return defaultInstance;
    }

    public SensorData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private SensorData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.cowboycoders.cyclismo.content.Sensor.SensorState value = org.cowboycoders.cyclismo.content.Sensor.SensorState.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              value_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<SensorData> PARSER =
        new com.google.protobuf.AbstractParser<SensorData>() {
      public SensorData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SensorData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];
    public static final int STATE_FIELD_NUMBER = 1;
    private org.cowboycoders.cyclismo.content.Sensor.SensorState state_;
    /**
     * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorState getState() {
      return state_;
    }

    // optional float value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private float value_;
    /**
     * <code>optional float value = 2;</code>
     *
     * <pre>
     * Value is only defined if state = SENDING.
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float value = 2;</code>
     *
     * <pre>
     * Value is only defined if state = SENDING.
     * </pre>
     */
    public float getValue() {
      return value_;
    }

    private void initFields() {
      state_ = org.cowboycoders.cyclismo.content.Sensor.SensorState.NONE;
      value_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, value_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, value_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.cowboycoders.cyclismo.content.Sensor.SensorData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.cowboycoders.cyclismo.content.SensorData}
     *
     * <pre>
     * The state and possible reading for a single sensor.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.cowboycoders.cyclismo.content.Sensor.SensorData, Builder>
        implements org.cowboycoders.cyclismo.content.Sensor.SensorDataOrBuilder {
      // Construct using org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = org.cowboycoders.cyclismo.content.Sensor.SensorState.NONE;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.cowboycoders.cyclismo.content.Sensor.SensorData getDefaultInstanceForType() {
        return org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      }

      public org.cowboycoders.cyclismo.content.Sensor.SensorData build() {
        org.cowboycoders.cyclismo.content.Sensor.SensorData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.cowboycoders.cyclismo.content.Sensor.SensorData buildPartial() {
        org.cowboycoders.cyclismo.content.Sensor.SensorData result = new org.cowboycoders.cyclismo.content.Sensor.SensorData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.cowboycoders.cyclismo.content.Sensor.SensorData other) {
        if (other == org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.cowboycoders.cyclismo.content.Sensor.SensorData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.cowboycoders.cyclismo.content.Sensor.SensorData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];
      private org.cowboycoders.cyclismo.content.Sensor.SensorState state_ = org.cowboycoders.cyclismo.content.Sensor.SensorState.NONE;
      /**
       * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorState getState() {
        return state_;
      }
      /**
       * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
       */
      public Builder setState(org.cowboycoders.cyclismo.content.Sensor.SensorState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required .org.cowboycoders.cyclismo.content.SensorState state = 1 [default = NONE];</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = org.cowboycoders.cyclismo.content.Sensor.SensorState.NONE;
        
        return this;
      }

      // optional float value = 2;
      private float value_ ;
      /**
       * <code>optional float value = 2;</code>
       *
       * <pre>
       * Value is only defined if state = SENDING.
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float value = 2;</code>
       *
       * <pre>
       * Value is only defined if state = SENDING.
       * </pre>
       */
      public float getValue() {
        return value_;
      }
      /**
       * <code>optional float value = 2;</code>
       *
       * <pre>
       * Value is only defined if state = SENDING.
       * </pre>
       */
      public Builder setValue(float value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        
        return this;
      }
      /**
       * <code>optional float value = 2;</code>
       *
       * <pre>
       * Value is only defined if state = SENDING.
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.cowboycoders.cyclismo.content.SensorData)
    }

    static {
      defaultInstance = new SensorData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.cowboycoders.cyclismo.content.SensorData)
  }

  public interface SensorDataSetOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional uint64 creation_time = 1 [default = 0];
    /**
     * <code>optional uint64 creation_time = 1 [default = 0];</code>
     *
     * <pre>
     * This is a required field.
     * </pre>
     */
    boolean hasCreationTime();
    /**
     * <code>optional uint64 creation_time = 1 [default = 0];</code>
     *
     * <pre>
     * This is a required field.
     * </pre>
     */
    long getCreationTime();

    // optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
     */
    boolean hasHeartRate();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getHeartRate();

    // optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
     */
    boolean hasCadence();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getCadence();

    // optional .org.cowboycoders.cyclismo.content.SensorData power = 4;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
     */
    boolean hasPower();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getPower();

    // optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
     */
    boolean hasBatteryLevel();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getBatteryLevel();

    // optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
     */
    boolean hasSpeed();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getSpeed();

    // optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
     */
    boolean hasDistance();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getDistance();

    // optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
     */
    boolean hasPowerB();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getPowerB();

    // optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
     */
    boolean hasTemperature();
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
     */
    org.cowboycoders.cyclismo.content.Sensor.SensorData getTemperature();
  }
  /**
   * Protobuf type {@code org.cowboycoders.cyclismo.content.SensorDataSet}
   *
   * <pre>
   * A message to encapsulate sensor readings associated with a track point.
   * </pre>
   */
  public static final class SensorDataSet extends
      com.google.protobuf.GeneratedMessageLite
      implements SensorDataSetOrBuilder {
    // Use SensorDataSet.newBuilder() to construct.
    private SensorDataSet(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private SensorDataSet(boolean noInit) {}

    private static final SensorDataSet defaultInstance;
    public static SensorDataSet getDefaultInstance() {
      return defaultInstance;
    }

    public SensorDataSet getDefaultInstanceForType() {
      return defaultInstance;
    }

    private SensorDataSet(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              creationTime_ = input.readUInt64();
              break;
            }
            case 18: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = heartRate_.toBuilder();
              }
              heartRate_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(heartRate_);
                heartRate_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = cadence_.toBuilder();
              }
              cadence_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cadence_);
                cadence_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = power_.toBuilder();
              }
              power_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(power_);
                power_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = batteryLevel_.toBuilder();
              }
              batteryLevel_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(batteryLevel_);
                batteryLevel_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = speed_.toBuilder();
              }
              speed_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speed_);
                speed_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = distance_.toBuilder();
              }
              distance_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(distance_);
                distance_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = powerB_.toBuilder();
              }
              powerB_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(powerB_);
                powerB_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = temperature_.toBuilder();
              }
              temperature_ = input.readMessage(org.cowboycoders.cyclismo.content.Sensor.SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(temperature_);
                temperature_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<SensorDataSet> PARSER =
        new com.google.protobuf.AbstractParser<SensorDataSet>() {
      public SensorDataSet parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorDataSet(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SensorDataSet> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint64 creation_time = 1 [default = 0];
    public static final int CREATION_TIME_FIELD_NUMBER = 1;
    private long creationTime_;
    /**
     * <code>optional uint64 creation_time = 1 [default = 0];</code>
     *
     * <pre>
     * This is a required field.
     * </pre>
     */
    public boolean hasCreationTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 creation_time = 1 [default = 0];</code>
     *
     * <pre>
     * This is a required field.
     * </pre>
     */
    public long getCreationTime() {
      return creationTime_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;
    public static final int HEART_RATE_FIELD_NUMBER = 2;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData heartRate_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
     */
    public boolean hasHeartRate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getHeartRate() {
      return heartRate_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;
    public static final int CADENCE_FIELD_NUMBER = 3;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData cadence_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
     */
    public boolean hasCadence() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getCadence() {
      return cadence_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData power = 4;
    public static final int POWER_FIELD_NUMBER = 4;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData power_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getPower() {
      return power_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;
    public static final int BATTERY_LEVEL_FIELD_NUMBER = 5;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData batteryLevel_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
     */
    public boolean hasBatteryLevel() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getBatteryLevel() {
      return batteryLevel_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;
    public static final int SPEED_FIELD_NUMBER = 6;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData speed_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getSpeed() {
      return speed_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;
    public static final int DISTANCE_FIELD_NUMBER = 7;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData distance_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getDistance() {
      return distance_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;
    public static final int POWER_B_FIELD_NUMBER = 8;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData powerB_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
     */
    public boolean hasPowerB() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getPowerB() {
      return powerB_;
    }

    // optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;
    public static final int TEMPERATURE_FIELD_NUMBER = 9;
    private org.cowboycoders.cyclismo.content.Sensor.SensorData temperature_;
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
     */
    public org.cowboycoders.cyclismo.content.Sensor.SensorData getTemperature() {
      return temperature_;
    }

    private void initFields() {
      creationTime_ = 0L;
      heartRate_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      cadence_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      power_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      batteryLevel_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      speed_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      distance_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      powerB_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      temperature_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasHeartRate()) {
        if (!getHeartRate().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCadence()) {
        if (!getCadence().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPower()) {
        if (!getPower().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBatteryLevel()) {
        if (!getBatteryLevel().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSpeed()) {
        if (!getSpeed().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDistance()) {
        if (!getDistance().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPowerB()) {
        if (!getPowerB().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTemperature()) {
        if (!getTemperature().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, creationTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, heartRate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, cadence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, power_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, batteryLevel_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, speed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, distance_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, powerB_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, temperature_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, creationTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, heartRate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cadence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, power_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, batteryLevel_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, speed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, distance_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, powerB_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, temperature_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.cowboycoders.cyclismo.content.Sensor.SensorDataSet prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.cowboycoders.cyclismo.content.SensorDataSet}
     *
     * <pre>
     * A message to encapsulate sensor readings associated with a track point.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.cowboycoders.cyclismo.content.Sensor.SensorDataSet, Builder>
        implements org.cowboycoders.cyclismo.content.Sensor.SensorDataSetOrBuilder {
      // Construct using org.cowboycoders.cyclismo.content.Sensor.SensorDataSet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        creationTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        heartRate_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        cadence_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        power_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        batteryLevel_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        speed_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        distance_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        powerB_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        temperature_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.cowboycoders.cyclismo.content.Sensor.SensorDataSet getDefaultInstanceForType() {
        return org.cowboycoders.cyclismo.content.Sensor.SensorDataSet.getDefaultInstance();
      }

      public org.cowboycoders.cyclismo.content.Sensor.SensorDataSet build() {
        org.cowboycoders.cyclismo.content.Sensor.SensorDataSet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.cowboycoders.cyclismo.content.Sensor.SensorDataSet buildPartial() {
        org.cowboycoders.cyclismo.content.Sensor.SensorDataSet result = new org.cowboycoders.cyclismo.content.Sensor.SensorDataSet(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.creationTime_ = creationTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.heartRate_ = heartRate_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cadence_ = cadence_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.power_ = power_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.batteryLevel_ = batteryLevel_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.speed_ = speed_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.distance_ = distance_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.powerB_ = powerB_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.temperature_ = temperature_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.cowboycoders.cyclismo.content.Sensor.SensorDataSet other) {
        if (other == org.cowboycoders.cyclismo.content.Sensor.SensorDataSet.getDefaultInstance()) return this;
        if (other.hasCreationTime()) {
          setCreationTime(other.getCreationTime());
        }
        if (other.hasHeartRate()) {
          mergeHeartRate(other.getHeartRate());
        }
        if (other.hasCadence()) {
          mergeCadence(other.getCadence());
        }
        if (other.hasPower()) {
          mergePower(other.getPower());
        }
        if (other.hasBatteryLevel()) {
          mergeBatteryLevel(other.getBatteryLevel());
        }
        if (other.hasSpeed()) {
          mergeSpeed(other.getSpeed());
        }
        if (other.hasDistance()) {
          mergeDistance(other.getDistance());
        }
        if (other.hasPowerB()) {
          mergePowerB(other.getPowerB());
        }
        if (other.hasTemperature()) {
          mergeTemperature(other.getTemperature());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (hasHeartRate()) {
          if (!getHeartRate().isInitialized()) {
            
            return false;
          }
        }
        if (hasCadence()) {
          if (!getCadence().isInitialized()) {
            
            return false;
          }
        }
        if (hasPower()) {
          if (!getPower().isInitialized()) {
            
            return false;
          }
        }
        if (hasBatteryLevel()) {
          if (!getBatteryLevel().isInitialized()) {
            
            return false;
          }
        }
        if (hasSpeed()) {
          if (!getSpeed().isInitialized()) {
            
            return false;
          }
        }
        if (hasDistance()) {
          if (!getDistance().isInitialized()) {
            
            return false;
          }
        }
        if (hasPowerB()) {
          if (!getPowerB().isInitialized()) {
            
            return false;
          }
        }
        if (hasTemperature()) {
          if (!getTemperature().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.cowboycoders.cyclismo.content.Sensor.SensorDataSet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.cowboycoders.cyclismo.content.Sensor.SensorDataSet) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint64 creation_time = 1 [default = 0];
      private long creationTime_ ;
      /**
       * <code>optional uint64 creation_time = 1 [default = 0];</code>
       *
       * <pre>
       * This is a required field.
       * </pre>
       */
      public boolean hasCreationTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 creation_time = 1 [default = 0];</code>
       *
       * <pre>
       * This is a required field.
       * </pre>
       */
      public long getCreationTime() {
        return creationTime_;
      }
      /**
       * <code>optional uint64 creation_time = 1 [default = 0];</code>
       *
       * <pre>
       * This is a required field.
       * </pre>
       */
      public Builder setCreationTime(long value) {
        bitField0_ |= 0x00000001;
        creationTime_ = value;
        
        return this;
      }
      /**
       * <code>optional uint64 creation_time = 1 [default = 0];</code>
       *
       * <pre>
       * This is a required field.
       * </pre>
       */
      public Builder clearCreationTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        creationTime_ = 0L;
        
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData heartRate_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
       */
      public boolean hasHeartRate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getHeartRate() {
        return heartRate_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
       */
      public Builder setHeartRate(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        heartRate_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
       */
      public Builder setHeartRate(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        heartRate_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
       */
      public Builder mergeHeartRate(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            heartRate_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          heartRate_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(heartRate_).mergeFrom(value).buildPartial();
        } else {
          heartRate_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData heart_rate = 2;</code>
       */
      public Builder clearHeartRate() {
        heartRate_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData cadence_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
       */
      public boolean hasCadence() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getCadence() {
        return cadence_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
       */
      public Builder setCadence(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        cadence_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
       */
      public Builder setCadence(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        cadence_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
       */
      public Builder mergeCadence(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            cadence_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          cadence_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(cadence_).mergeFrom(value).buildPartial();
        } else {
          cadence_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData cadence = 3;</code>
       */
      public Builder clearCadence() {
        cadence_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData power = 4;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData power_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getPower() {
        return power_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
       */
      public Builder setPower(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        power_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
       */
      public Builder setPower(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        power_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
       */
      public Builder mergePower(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            power_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          power_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(power_).mergeFrom(value).buildPartial();
        } else {
          power_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power = 4;</code>
       */
      public Builder clearPower() {
        power_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData batteryLevel_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
       */
      public boolean hasBatteryLevel() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getBatteryLevel() {
        return batteryLevel_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
       */
      public Builder setBatteryLevel(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        batteryLevel_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
       */
      public Builder setBatteryLevel(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        batteryLevel_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
       */
      public Builder mergeBatteryLevel(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            batteryLevel_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          batteryLevel_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(batteryLevel_).mergeFrom(value).buildPartial();
        } else {
          batteryLevel_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData battery_level = 5;</code>
       */
      public Builder clearBatteryLevel() {
        batteryLevel_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData speed_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getSpeed() {
        return speed_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
       */
      public Builder setSpeed(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        speed_ = value;

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
       */
      public Builder setSpeed(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        speed_ = builderForValue.build();

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
       */
      public Builder mergeSpeed(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            speed_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          speed_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(speed_).mergeFrom(value).buildPartial();
        } else {
          speed_ = value;
        }

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData speed = 6;</code>
       */
      public Builder clearSpeed() {
        speed_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData distance_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
       */
      public boolean hasDistance() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getDistance() {
        return distance_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
       */
      public Builder setDistance(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        distance_ = value;

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
       */
      public Builder setDistance(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        distance_ = builderForValue.build();

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
       */
      public Builder mergeDistance(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            distance_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          distance_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(distance_).mergeFrom(value).buildPartial();
        } else {
          distance_ = value;
        }

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData distance = 7;</code>
       */
      public Builder clearDistance() {
        distance_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData powerB_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
       */
      public boolean hasPowerB() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getPowerB() {
        return powerB_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
       */
      public Builder setPowerB(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        powerB_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
       */
      public Builder setPowerB(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        powerB_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
       */
      public Builder mergePowerB(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            powerB_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          powerB_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(powerB_).mergeFrom(value).buildPartial();
        } else {
          powerB_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData power_b = 8;</code>
       */
      public Builder clearPowerB() {
        powerB_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;
      private org.cowboycoders.cyclismo.content.Sensor.SensorData temperature_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
       */
      public org.cowboycoders.cyclismo.content.Sensor.SensorData getTemperature() {
        return temperature_;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
       */
      public Builder setTemperature(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        temperature_ = value;

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
       */
      public Builder setTemperature(
          org.cowboycoders.cyclismo.content.Sensor.SensorData.Builder builderForValue) {
        temperature_ = builderForValue.build();

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
       */
      public Builder mergeTemperature(org.cowboycoders.cyclismo.content.Sensor.SensorData value) {
        if (((bitField0_ & 0x00000100) == 0x00000100) &&
            temperature_ != org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance()) {
          temperature_ =
            org.cowboycoders.cyclismo.content.Sensor.SensorData.newBuilder(temperature_).mergeFrom(value).buildPartial();
        } else {
          temperature_ = value;
        }

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.cowboycoders.cyclismo.content.SensorData temperature = 9;</code>
       */
      public Builder clearTemperature() {
        temperature_ = org.cowboycoders.cyclismo.content.Sensor.SensorData.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.cowboycoders.cyclismo.content.SensorDataSet)
    }

    static {
      defaultInstance = new SensorDataSet(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.cowboycoders.cyclismo.content.SensorDataSet)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
